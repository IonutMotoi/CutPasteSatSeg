"""
This script generates a dataset of instances to be used for cut and paste augmentation.
The dataset is generated by iterating over the files specified in the txt file,
extracting the connected components of the specified class, and saving them to a folder.
"""

import os
import rasterio  # Can be replaced with any library that can read the images and labels as numpy arrays
import numpy as np
import cv2
from tqdm import tqdm


def generate_cap_dataset(file_list, root_dataset, output_folder):
    print(f"Generating cut and paste dataset from files in {file_list} and saving to {output_folder}")
    os.makedirs(output_folder, exist_ok=True)
    for i in range(7):
        os.makedirs(os.path.join(output_folder, f"class_{str(i)}"), exist_ok=True)

    with open(file_list, "r") as f:
        file_list = [line.rstrip().split(' ') for line in f]
    img_files, label_files = list(zip(*file_list))

    pbar = tqdm(total=len(img_files))
    for i, (img_file, label_file) in enumerate(zip(img_files, label_files)):
        img = rasterio.open(os.path.join(root_dataset, img_file)).read()
        label_all = rasterio.open(os.path.join(root_dataset, label_file)).read()

        for class_index in range(label_all.shape[0]):
            label = label_all[class_index]

            # Skip the class if it is not present in the image
            if not np.any(label):
                continue

            # Extract the connected components and their stats
            num_components, components, stats, _ = cv2.connectedComponentsWithStats(label)

            # For each component save the corresponding patch to the output folder
            for j in range(1, num_components):

                # Crop the component from the image
                component_left = stats[j, cv2.CC_STAT_LEFT]
                component_right = component_left + stats[j, cv2.CC_STAT_WIDTH]
                component_top = stats[j, cv2.CC_STAT_TOP]
                component_bottom = component_top + stats[j, cv2.CC_STAT_HEIGHT]
                component_img = img[:, component_top:component_bottom, component_left:component_right]
                component_mask = components[component_top:component_bottom, component_left:component_right] == j

                # Save as npy
                np.save(os.path.join(output_folder, f"class_{str(class_index)}",
                        f"class{str(class_index)}_{i}_{j}.npy"), component_img)
                np.save(os.path.join(output_folder, f"class_{str(class_index)}",
                        f"class{str(class_index)}_{i}_{j}_mask.npy"), component_mask)

        pbar.update(1)


if __name__ == "__main__":
    FILE_LIST = "dataset/train.txt"
    ROOT_DATASET = "dataset/"
    OUTPUT_FOLDER = "dataset/cap_dataset/"

    generate_cap_dataset(FILE_LIST, ROOT_DATASET, OUTPUT_FOLDER)
